import os
import time
import datetime
import socket
import re
import json
import logging
import threading
from concurrent.futures import ThreadPoolExecutor
from pymelsec import Type4E
from pymelsec.constants import DT
from pymelsec.tag import Tag
from influxdb_client import InfluxDBClient, Point
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# InfluxDB Configuration from .env
INFLUX_URL = os.getenv("INFLUX_URL")
INFLUX_TOKEN = os.getenv("TOKEN_LOCAL")
INFLUX_ORG = os.getenv("INFLUX_ORG")
INFLUX_BUCKET = os.getenv("INFLUX_BUCKET")

# Initialize InfluxDB client
client = InfluxDBClient(url=INFLUX_URL, token=INFLUX_TOKEN)
write_api = client.write_api()

# Start replication (simplified version)
def start_replication():
    """Basic replication setup placeholder"""
    logging.info("Replication setup skipped for simplicity")
    return True

# Constants
SEND_INTERVAL = 1  # seconds between data fetches

# PLC Settings
PLC_HOST = '172.16.20.70'
PLC_PORT = 4999
PLC_TYPE = 'Q'
read_tags = [
    Tag(device="D551", type=DT.SWORD),
    Tag(device="D552", type=DT.SWORD),
    Tag(device="D553", type=DT.SWORD),
    Tag(device="M100", type=DT.SWORD),
    Tag(device="M101", type=DT.SWORD),
    Tag(device="x2", type=DT.SWORD)
]

# Controllers Config
CONTROLLERS_CONFIG = {
    '172.16.20.44': {'gun_number': 1, 'station': 'Station 10R1'},
    '172.16.20.45': {'gun_number': 2, 'station': 'Station 10R1'},
    '172.16.20.46': {'gun_number': 3, 'station': 'Station 10R1'},
    '172.16.20.42': {'gun_number': 1, 'station': 'Station 10L1'},
    '172.16.20.43': {'gun_number': 2, 'station': 'Station 10L1'},
    '172.16.20.51': {'gun_number': 1, 'station': 'Station 40A'},
    '172.16.20.87': {'gun_number': 1, 'station': 'Station ST30'},
    '172.16.20.88': {'gun_number': 1, 'station': 'Station ST40A'},
    '172.16.20.89': {'gun_number': 1, 'station': 'Station ST40B'},
    '172.16.20.80': {'gun_number': 1, 'station': 'Station 10A'},
    '172.16.20.81': {'gun_number': 1, 'station': 'Station 10B'},
    '172.16.20.82': {'gun_number': 2, 'station': 'Station 10B'},
    '172.16.20.52': {'gun_number': 1, 'station': 'Station 40E'},
}

# Torque limits by tool type
FIXED_LIMITS = {
    'Station 10R1': {'min': 23.0, 'max': 34.0},
    'Station 10L1': {'min': 23.0, 'max': 34.0},
    'Station 40A': {'min': 4.0, 'max': 7.0},
    'Station 40E': {'min': 4.0, 'max': 7.0},
    'Station ST30': {'min': 36.0, 'max': 50.0},
    'Station ST40A': {'min': 6.7, 'max': 10.0},
    'Station ST40B': {'min': 40, 'max': 60.0},
    'Station 10A': {'min': 36.0, 'max': 50.0},  
    'Station 10B': {'min': 17.0, 'max': 25.5},
}

# Global data structure with thread lock
output_data = {
    "stations": {},
    "plc_data": {},
    "errors": [],
    "timestamp": None
}
data_lock = threading.Lock()

# Dictionary to store previous values and counters for each gun
gun_data_history = {}

def is_valid_float(value):
    return re.match(r'^-?\d+(\.\d+)?$', value) is not None

def get_tool_type_from_plc_data(d_values):
    variant = "Not Available"
    D551_value = d_values.get("D551", 0)
    if D551_value == 1:
        variant = "LXI"
    elif D551_value == 2:
        variant = "VXI"
    elif D551_value == 3:
        variant = "ZXI"
    return variant

def read_plc_data():
    """Continuously read PLC data in a separate thread"""
    while True:
        try:
            with Type4E(host=PLC_HOST, port=PLC_PORT, plc_type=PLC_TYPE) as plc:
                plc.set_access_opt(comm_type="binary")
                read_result = plc.read(devices=read_tags)
                plc_data = {tag.device: tag.value for tag in read_result}
                variant = get_tool_type_from_plc_data(plc_data)
                with data_lock:
                    output_data["plc_data"] = {
                        "current_variant": variant,
                        "M100": plc_data.get("M100", None),
                        "M101": plc_data.get("M101", None),
                        "X2": plc_data.get("x2", None),
                        "D553": plc_data.get("D553", None),
                        "timestamp": datetime.datetime.now().isoformat()
                    }
        except Exception as e:
            logging.error(f"Error reading PLC data: {str(e)}")
            with data_lock:
                output_data["plc_data"] = {
                    "error": str(e),
                    "timestamp": datetime.datetime.now().isoformat()
                }
        finally:
            time.sleep(1)

def send_keep_alive(sock, ip):
    """Send keep-alive packet to maintain connection"""
    try:
        keep_alive_data = bytes([0x30, 0x30, 0x32, 0x30, 0x39, 0x39, 0x39, 0x39,
                                0x30, 0x30, 0x31, 0x30, 0x20, 0x20, 0x20, 0x20,
                                0x20, 0x20, 0x20, 0x20, 0x00])
        sock.send(keep_alive_data)
        sock.recv(1025)
    except Exception as e:
        logging.debug(f"Keep-alive failed for {ip}: {str(e)}")

def process_controller(ip, config):
    """Process a single controller connection and data collection"""
    station_name = config['station']
    gun_number = config['gun_number']
    gun_key = f"{station_name}_gun_{gun_number}"
    
    # Initialize history for this gun if not exists
    with data_lock:
        if gun_key not in gun_data_history:
            gun_data_history[gun_key] = {
                'prev_torque': None,
                'prev_angle': None,
                'torque_count': 0,
                'angle_count': 0,
                'pass_count': 0,
                'fail_count': 0,
                'prev_status': None
            }
    
    while True:
        start_time = time.time()
        sock = None
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(2)
            sock.connect((ip, 4545))
            
            # Send handshake
            handshake_data = bytes([0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x31,
                                  0x30, 0x30, 0x33, 0x30, 0x20, 0x20, 0x20, 0x20,
                                  0x20, 0x20, 0x20, 0x20, 0x00])
            sock.send(handshake_data)
            response = sock.recv(1025)
            
            if response.decode('ascii')[4:8] == "0002":
                # Request torque data
                request = bytes([0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x36, 0x34,
                               0x30, 0x30, 0x31, 0x30, 0x20, 0x20, 0x20, 0x20,
                               0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x30, 0x30,
                               0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00])
                sock.send(request)
                byte_from = sock.recv(1025)
                data = byte_from.decode('ascii', errors='ignore')
                
                if data[4:8] == "0065":
                    process_torque_data(data, ip, config)
                else:
                    send_keep_alive(sock, ip)
                    send_min_max_only(config['station'], config['gun_number'])
            else:
                send_keep_alive(sock, ip)
                send_min_max_only(config['station'], config['gun_number'])
                
        except Exception as e:
            send_min_max_only(config['station'], config['gun_number'])
            with data_lock:
                output_data["errors"].append({
                    "station": config['station'],
                    "ip": ip,
                    "gun_number": config['gun_number'],
                    "error": str(e),
                    "timestamp": datetime.datetime.now().isoformat()
                })
        finally:
            if sock:
                try:
                    sock.close()
                except:
                    pass
            # Calculate remaining time to maintain interval
            elapsed = time.time() - start_time
            if elapsed < SEND_INTERVAL:
                time.sleep(SEND_INTERVAL - elapsed)

def process_torque_data(data, ip, config):
    """Process received torque data and write to InfluxDB"""
    v_start, v_end, a_start, a_end = 83, 87, 92, 94
    raw_val = data[v_start:v_end].replace(':', '.').strip()
    raw_ang = data[a_start:a_end].strip()
    station_name = config['station']
    gun_number = config['gun_number']
    gun_key = f"{station_name}_gun_{gun_number}"
    
    if is_valid_float(raw_val) and raw_ang.isdigit():
        torque_value = int(raw_val) / 100.0
        formatted_val = "{:.2f}".format(torque_value)
        
        with data_lock:
            plc_variant = output_data["plc_data"].get("current_variant", "Not Available")
            
            # Determine torque limits
            if station_name == 'Station 10R1' and plc_variant in ('VXI', 'ZXI'):
                torque_min = 17.0
                torque_max = 25.5
            elif station_name in FIXED_LIMITS:
                torque_min = FIXED_LIMITS[station_name]['min']
                torque_max = FIXED_LIMITS[station_name]['max']
            else:
                torque_min = 0.0
                torque_max = 0.0
            
            # Determine current status
            current_status = "pass" if torque_min <= torque_value <= torque_max else "fail"
            
            # Update counters if values changed
            prev_torque = gun_data_history[gun_key]['prev_torque']
            prev_angle = gun_data_history[gun_key]['prev_angle']
            prev_status = gun_data_history[gun_key]['prev_status']
            torque_count = gun_data_history[gun_key]['torque_count']
            angle_count = gun_data_history[gun_key]['angle_count']
            pass_count = gun_data_history[gun_key]['pass_count']
            fail_count = gun_data_history[gun_key]['fail_count']
            
            if prev_torque is None or abs(float(formatted_val) - (float(prev_torque) if prev_torque else 0)) > 0.01:
                torque_count += 1
                gun_data_history[gun_key]['torque_count'] = torque_count
                gun_data_history[gun_key]['prev_torque'] = formatted_val
                
                if prev_status != current_status:
                    if current_status == "pass":
                        pass_count += 1
                        gun_data_history[gun_key]['pass_count'] = pass_count
                    else:
                        fail_count += 1
                        gun_data_history[gun_key]['fail_count'] = fail_count
                    gun_data_history[gun_key]['prev_status'] = current_status
            
            if prev_angle is None or raw_ang != prev_angle:
                angle_count += 1
                gun_data_history[gun_key]['angle_count'] = angle_count
                gun_data_history[gun_key]['prev_angle'] = raw_ang
        
        # Create InfluxDB point
        point = Point("torque_measurement") \
            .tag("station", station_name) \
            .tag("torque_gun", f"torque_gun_{gun_number}") \
            .tag("variant", plc_variant) \
            .field("torque_value", float(formatted_val)) \
            .field("angle", float(raw_ang)) \
            .field("max_limit", float(torque_max)) \
            .field("min_limit", float(torque_min)) \
            .field("connection_status", "connected") \
            .field("status", current_status)
        
        # Write to InfluxDB
        write_api.write(INFLUX_BUCKET, INFLUX_ORG, point)
        
        # Update output data
        with data_lock:
            if station_name not in output_data["stations"]:
                output_data["stations"][station_name] = {}
            
            output_data["stations"][station_name][f"gun_{gun_number}"] = {
                "torque": formatted_val,
                "angle": raw_ang,
                "torque_count_onchange": torque_count,
                "angle_count_onchange": angle_count,
                "pass_count": pass_count,
                "fail_count": fail_count,
                "min_limit": torque_min,
                "max_limit": torque_max,
                "variant": plc_variant,
                "status": current_status,
                "connection_status": "connected"
            }

def send_min_max_only(station_name, gun_number):
    """Write min/max limits to InfluxDB when controller is disconnected"""
    try:
        gun_key = f"{station_name}_gun_{gun_number}"
        
        with data_lock:
            plc_variant = output_data["plc_data"].get("current_variant", "Not Available")
            torque_count = gun_data_history.get(gun_key, {}).get('torque_count', 0)
            angle_count = gun_data_history.get(gun_key, {}).get('angle_count', 0)
            pass_count = gun_data_history.get(gun_key, {}).get('pass_count', 0)
            fail_count = gun_data_history.get(gun_key, {}).get('fail_count', 0)
        
        # Determine limits
        if station_name == 'Station 10R1' and plc_variant == 'LXI':
            torque_min = 23.0
            torque_max = 34.0
        elif station_name == 'Station 10R1' and plc_variant in ('VXI', 'ZXI'):
            torque_min = 17.0
            torque_max = 25.5
        elif station_name in FIXED_LIMITS:
            torque_min = FIXED_LIMITS[station_name]['min']
            torque_max = FIXED_LIMITS[station_name]['max']
        else:
            return
        
        # Create InfluxDB point for disconnected state
        point = Point("torque_measurement") \
            .tag("station", station_name) \
            .tag("torque_gun", f"torque_gun_{gun_number}") \
            .tag("variant", plc_variant) \
            .field("max_limit", float(torque_max)) \
            .field("min_limit", float(torque_min)) \
            .field("connection_status", "disconnected") \
            .field("status", "unknown")
        
        write_api.write(INFLUX_BUCKET, INFLUX_ORG, point)
        
    except Exception as e:
        logging.error(f"Error updating min/max limits for {station_name} gun {gun_number}: {e}")

def print_data():
    """Print PLC and station data at regular intervals"""
    while True:
        with data_lock:
            output_data["timestamp"] = datetime.datetime.now().isoformat()
            print("\n" + "="*50)
            print("PLC Data:")
            print(json.dumps(output_data["plc_data"], indent=2))
            print("\nStation Data:")
            print(json.dumps(output_data["stations"], indent=2))
            if output_data["errors"]:
                print("\nErrors:")
                print(json.dumps(output_data["errors"], indent=2))
            print("="*50 + "\n")
        time.sleep(5)

def main():
    try:
        # Setup replication
        if not start_replication():
            logging.warning("Proceeding without replication setup")
        
        # Create thread pool
        with ThreadPoolExecutor(max_workers=14) as executor:
            # Start PLC reader and printer
            executor.submit(read_plc_data)
            executor.submit(print_data)
            
            # Submit controller tasks
            futures = []
            for ip, config in CONTROLLERS_CONFIG.items():
                future = executor.submit(process_controller, ip, config)
                futures.append(future)
            
            # Keep main thread alive
            while True:
                time.sleep(1)
                
    except KeyboardInterrupt:
        print("\nStopped by user.")
    except Exception as e:
        logging.error(f"Unexpected error in main loop: {str(e)}")

if __name__ == "__main__":
    main()
